using DataAccessLayer.Interfaces;
using DataAccessLayer;
using DataAccessLayer.Models;

namespace TestDataAccess;

public class TestSignalDataAccess
{
    private ISignalDataAccess _dataAccess;
    private Signal _signal;

    [OneTimeSetUp]
    public void OneTimeSetup()
    {
        _signal = new()
        {
            FromUtc = DateTime.UtcNow,
            ToUtc = DateTime.UtcNow.AddHours(1),
            Price = 20,
            CurrencyId = 1,
            QuantityMw = 10,
            DirectionId = 1,
            BidId = 1
        };
        _dataAccess = DataAccessFactory.GetDataAccess<ISignalDataAccess>(Configuration.CONNECTION_STRING_TEST);
    }

    [Test]
    [Order(1)]
    public async Task SignalDataAccess_ShouldReturnAutogeneratedID_WhenCreatingASignal()
    {
        //Arrange done in OneTimeSetup
        Signal signal = _signal;

        //Act
        _signal.ID = await _dataAccess.CreateAsync(signal);

        //Assert
        Assert.That(_signal.ID, Is.Not.EqualTo(-1), $"Failed to insert a new Signal.");
    }

    [Test]
    [Order(2)]
    public async Task SignalDataAccess_ShouldGetLastCreatedSignal_WhenGivenItsId()
    {
        //Arrange
        Signal newSignal;

        //Act
        newSignal = await _dataAccess.GetAsync(_signal.ID);

        //Assert
        Assert.Multiple(() =>
        {
            Assert.That(newSignal, Is.Not.Null, $"No Signal was retrieved with ID: '{_signal.ID}'");
            Assert.That(newSignal, Is.EqualTo(_signal), $"Signals didn't match!");
        });
    }

    [Test]
    [Order(3)]
    public async Task SignalDataAccess_ShouldGetAllSignals()
    {
        //Arrange
        IEnumerable<Signal> signals;

        //Act
        signals = await _dataAccess.GetAllAsync();

        //Assert
        Assert.That(signals, Is.Not.Empty, $"Failed to retrieve all signals!");
    }

    [Test]
    [Order(4)]
    public async Task SignalDataAccess_ShouldReturnTrueAndTheNewSignal_WhenUpdatingAndGettingSignal()
    {
        //Arrange
        int newDirectionId = 2;
        bool isUpdated;
        _signal.DirectionId = newDirectionId;

        //Act
        isUpdated = await _dataAccess.UpdateAsync(_signal);
        Signal refoundSignal = await _dataAccess.GetAsync(_signal.ID);

        //Assert
        Assert.Multiple(() =>
        {
            Assert.That(isUpdated, Is.True, $"Failed to update Signal with ID: '{_signal.ID}'");
            Assert.That(refoundSignal, Is.EqualTo(_signal), $"Getting the updated signal from the database returned a different one.");
        });
    }

    [Test]
    [Order(5)]
    public async Task SignalDataAccess_ShouldReturnTrue_WhenDeletingSignal()
    {
        //Arrange
        bool isDeleted;

        //Act
        isDeleted = await _dataAccess.DeleteAsync(_signal.ID);

        //Asert
        Assert.That(isDeleted, Is.True, $"Failed to delete Signal with ID: '{_signal.ID}'");
    }
}