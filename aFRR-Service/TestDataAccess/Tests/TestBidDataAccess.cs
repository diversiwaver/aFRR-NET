using BaseDataAccess.Interfaces;
using BaseDataAccess.Models;
using DataAccessLayer;

namespace TestDataAccess.Tests;

public class TestBidDataAccess
{
    private IBidDataAccess _dataAccess;
    private int _lastCreatedModelId;

    [OneTimeSetUp]
    public void OneTimeSetup()
    {
        _lastCreatedModelId = -1;
        _dataAccess = DataAccessFactory.GetDataAccess<IBidDataAccess>(Configuration.CONNECTION_STRING_TEST);
    }

    [OneTimeTearDown]
    public async Task OneTimeTearDown()
    {
        await _dataAccess.DeleteAsync(_lastCreatedModelId);
    }

    [Test]
    [Order(1)]
    public async Task BidDataAccess_ShouldReturnAutogeneratedID_WhenCreatingABid()
    {
        //Arrange
        Bid bid = new()
        {
            ExternalId = new Guid(),
            FromUtc = DateTime.UtcNow,
            ToUtc = DateTime.UtcNow.AddHours(1),
            QuantityMw = 15,
            Price = 20,
            CurrencyId = 0
        };

        //Act
        _lastCreatedModelId = await _dataAccess.CreateAsync(bid);

        //Assert
        Assert.That(_lastCreatedModelId, Is.Not.EqualTo(-1), $"Failed to insert a new Bid.");
    }

    [Test]
    [Order(2)]
    public async Task BidDataAccess_ShouldGetLastCreatedBid_WhenGivenItsId()
    {
        //Arrange
        Bid newBid;

        //Act
        newBid = await _dataAccess.GetAsync(_lastCreatedModelId);

        //Assert
        Assert.That(newBid, Is.Not.Null, $"No Bid was retrieved with ID: '{_lastCreatedModelId}'");
    }

    [Test]
    [Order(3)]
    public async Task BidDataAccess_ShouldGetAllBids()
    {
        //Arrange
        IEnumerable<Bid> bids;

        //Act
        bids = await _dataAccess.GetAllAsync();

        //Assert
        Assert.That(bids, Is.Not.Empty, $"Failed to retrieve all bids!");
    }

    [Test]
    [Order(4)]
    public async Task BidDataAccess_ShouldReturnTrueAndTheNewBid_WhenUpdatingAndGettingBid()
    {
        //Arrange
        int newQuantity = 20;
        bool isUpdated;
        Bid bid = await _dataAccess.GetAsync(_lastCreatedModelId);
        decimal oldQuantity = bid.QuantityMw;

        bid = new()
        {
            Id = _lastCreatedModelId,
            ExternalId = bid.ExternalId,
            FromUtc = bid.FromUtc,
            ToUtc = bid.ToUtc,
            QuantityMw = newQuantity,
            Price = bid.Price,
            CurrencyId = bid.CurrencyId
        };

        //Act
        isUpdated = await _dataAccess.UpdateAsync(bid);
        Bid refoundBid = await _dataAccess.GetAsync(bid.Id);

        //Assert
        Assert.Multiple(() =>
        {
            Assert.That(isUpdated, Is.True, $"Failed to update Bid with ID: '{_lastCreatedModelId}'");
            Assert.That(refoundBid.QuantityMw, Is.Not.EqualTo(oldQuantity), $"Quantity is the same as before, it didn't update.");
            Assert.That(refoundBid.QuantityMw, Is.EqualTo(bid.QuantityMw), $"Getting the updated bid from the database returned a different one.");
        });
    }

    [Test]
    [Order(5)]
    public async Task BidDataAccess_ShouldReturnTrue_WhenDeletingBid()
    {
        //Arrange
        bool isDeleted;

        //Act
        isDeleted = await _dataAccess.DeleteAsync(_lastCreatedModelId);

        //Asert
        Assert.That(isDeleted, Is.True, $"Failed to delete Bid with ID: '{_lastCreatedModelId}'");
    }
}